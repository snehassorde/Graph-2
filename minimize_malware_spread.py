# Time Complexity : O(n^2)
# Space Complexity : O(n)
from typing import List
class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        colors = [-1]*n
        c = 0
        
        def dfs(i, c):
            #base
            if(colors[i] != -1):
                return 
            
            #logic
            colors[i] = c
            for j in range(n):
                if graph[i][j] == 1:
                    dfs(j, c)

        for i in range(n):
            if colors[i] == -1:
                dfs(i, c)
                c+=1
        
        #total no.of ele in each group
        groups = [0]*n
        for col in colors:
            groups[col]+=1
        
        #count of infected nodes in each group
        initGroup = [0]*c
        for node in initial:
            col = colors[node]
            initGroup[col]+=1
        
        result = float('inf')
        for node in initial:
            cl = colors[node]
            cnt = initGroup[cl]
            if cnt ==1:
                if result == float('inf'):
                    result = node
                elif(groups[colors[result]] < groups[colors[node]]):
                    result = node
                elif(groups[colors[result]] == groups[colors[node]] and node<result):
                    result = node
        
        if(result == float('inf')):
            for node in initial:
                result = min(result, node)
        
        return result